import os
import re
import json
import time
import logging
import configparser
import vk_api
import telebot
import sys
from logging.handlers import RotatingFileHandler
from functools import wraps

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8 (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Windows)
sys.stdout.reconfigure(encoding='utf-8')

##################################
# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
##################################
CONFIG_FILE = "config.ini"

def load_config(config_file=CONFIG_FILE):
    config = configparser.ConfigParser()
    if not os.path.exists(config_file):
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    config.read(config_file, encoding="utf-8")
    return config

config = load_config()

# –ò–∑ —Å–µ–∫—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
VK_TOKEN = config.get("VK", "token")
VK_GROUP_ID = config.get("VK", "group_id")
TG_BOT_TOKEN = config.get("TELEGRAM", "bot_token").strip()
print("–ß–∏—Ç–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω:", repr(TG_BOT_TOKEN))
TG_CHAT_ID = config.get("TELEGRAM", "chat_id")
CHECK_INTERVAL = config.getint("SETTINGS", "check_interval", fallback=600)

# –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –≤ —Å–µ–∫—Ü–∏–∏ [VK_LINKS]
VK_LINKS = dict(config.items("VK_LINKS")) if config.has_section("VK_LINKS") else {}

##################################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
##################################
logger = logging.getLogger("vk_tg_bot")
logger.setLevel(logging.INFO)
handler = RotatingFileHandler("bot.log", maxBytes=1_000_000, backupCount=3, encoding="utf-8")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID –ø–æ—Å—Ç–∞
LAST_POST_FILE = "last_post.json"

##################################
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (retry)
##################################
def retry(max_attempts=3, delay=5):
    def decorator(func):
        @wraps(func)
        def wrapped(*args, **kwargs):
            attempts = 0
            while attempts < max_attempts:
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    attempts += 1
                    logger.warning("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ %s. –ü–æ–ø—ã—Ç–∫–∞ %d/%d. –û—à–∏–±–∫–∞: %s",
                                   func.__name__, attempts, max_attempts, e)
                    time.sleep(delay)
            raise Exception(f"{func.__name__} –Ω–µ —Å–º–æ–≥–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫.")
        return wrapped
    return decorator

##################################
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API: VK –∏ Telegram
##################################
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()
bot = telebot.TeleBot(TG_BOT_TOKEN)

##################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
##################################
def load_last_post_id():
    if os.path.exists(LAST_POST_FILE):
        try:
            with open(LAST_POST_FILE, "r", encoding="utf-8") as file:
                data = json.load(file)
                return data.get("last_post_id")
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞.")
            return None
    return None

def save_last_post_id(post_id):
    try:
        with open(LAST_POST_FILE, "w", encoding="utf-8") as file:
            json.dump({"last_post_id": post_id}, file)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: %s", e)

##################################
# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ VK
##################################
def format_vk_text(text: str) -> str:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw-—Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    pattern = r"\[club(\d+)\|(.*?)\]"
    
    def repl(match):
        club_id, name = match.groups()
        url = VK_LINKS.get(f"club{club_id}", f"https://vk.com/club{club_id}")
        return f'<a href="{url}">{name}</a>'
    
    return re.sub(pattern, repl, text)

##################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞ VK
##################################
def process_attachments(attachments):
    """
    –†–∞–∑–±–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ —Ç–∏–ø–∞–º:
      - photos: —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
      - videos: —Å–ø–∏—Å–æ–∫ URL –≤–∏–¥–µ–æ (–∏–∑ –ø–æ–ª—è 'player')
      - docs: —Å–ø–∏—Å–æ–∫ URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    photos = []
    videos = []
    docs = []
    for att in attachments:
        att_type = att.get("type")
        if att_type == "photo":
            sizes = att["photo"].get("sizes", [])
            if sizes:
                best_photo = max(sizes, key=lambda s: s.get("width", 0) * s.get("height", 0))
                photos.append(best_photo.get("url"))
        elif att_type == "video":
            video = att.get("video", {})
            video_url = video.get("player")
            if video_url:
                videos.append(video_url)
        elif att_type == "doc":
            doc = att.get("doc", {})
            doc_url = doc.get("url")
            if doc_url:
                docs.append(doc_url)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π
    return photos, videos, docs

##################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ VK (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö)
##################################
@retry(max_attempts=3, delay=3)
def get_latest_post():
    response = vk.wall.get(owner_id=-int(VK_GROUP_ID), count=5)
    posts = response.get("items", [])
    for post in posts:
        if post.get("is_pinned"):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ—Å—Ç
        post_id = post.get("id")
        text = format_vk_text(post.get("text", ""))
        attachments = post.get("attachments", [])
        photos, videos, docs = process_attachments(attachments)
        return post_id, text, photos, videos, docs
    return None, None, [], [], []

##################################
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
##################################
def send_to_telegram():
    last_post_id = load_last_post_id()
    post_id, text, photos, videos, docs = get_latest_post()
    
    if not post_id or post_id == last_post_id:
        logger.info("–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è
        if photos:
            media_group = []
            for i, photo in enumerate(photos):
                # –ö –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
                caption = text if (i == 0 and text) else ""
                media_group.append(telebot.types.InputMediaPhoto(photo, caption=caption))
            bot.send_media_group(TG_CHAT_ID, media_group)
            logger.info("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π.")
        elif text:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            bot.send_message(TG_CHAT_ID, text, parse_mode="HTML")
            logger.info("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for video_url in videos:
            try:
                bot.send_video(TG_CHAT_ID, video=video_url,
                               caption=text if not photos else "", parse_mode="HTML")
                logger.info("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", video_url)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ %s: %s", video_url, e)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è (–≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫)
        for doc_url in docs:
            try:
                message = f"–î–æ–∫—É–º–µ–Ω—Ç: <a href='{doc_url}'>–°—Å—ã–ª–∫–∞</a>"
                bot.send_message(TG_CHAT_ID, message, parse_mode="HTML")
                logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", doc_url)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç %s: %s", doc_url, e)
    except Exception as exc:
        logger.exception("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)
    
    save_last_post_id(post_id)

##################################
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
##################################
def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            send_to_telegram()
        except Exception as err:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: %s", err)
        logger.info("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ %d –º–∏–Ω—É—Ç...", CHECK_INTERVAL // 60)
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()
